// src/pages/CartItems.jsx
import React, { useEffect, useState, useRef, useMemo } from "react";
import { useNavigate } from "react-router-dom";
import { FaPlus, FaMinus, FaTrash, FaSpinner } from "react-icons/fa";
import { useCart } from "../store/CartContext";
import "/src/styles/CartItems.css";
import { formatProductImageUrl } from "../utils/imageUtils";

// Th√™m style n·ªôi tuy·∫øn ƒë·ªÉ ghi ƒë√® l√™n c√°c animation kh√¥ng c·∫ßn thi·∫øt
const overrideStyles = {
  quantityButton: {
    width: '38px',
    height: '38px',
    backgroundColor: '#4caf50',
    color: 'white',
    border: 'none',
    borderRadius: '4px',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    cursor: 'pointer',
    boxShadow: '0 2px 4px rgba(0,0,0,0.2)',
    transition: 'transform 0.2s ease, background-color 0.2s ease',
  },
  quantityButtonDisabled: {
    backgroundColor: '#bdbdbd',
    cursor: 'not-allowed',
    opacity: 0.7,
  },
  removeButton: {
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    gap: '8px',
    padding: '8px 16px',
    backgroundColor: '#f44336',
    color: 'white',
    border: 'none',
    borderRadius: '4px',
    cursor: 'pointer',
    boxShadow: '0 2px 4px rgba(0,0,0,0.2)',
    transition: 'transform 0.2s ease, background-color 0.2s ease',
  },
  removeButtonDisabled: {
    backgroundColor: '#bdbdbd',
    cursor: 'not-allowed',
    opacity: 0.7,
  },
  icon: {
    width: '20px',
    height: '20px',
    color: 'white',
    fill: 'white',
  }
};

const CartItems = () => {
  const navigate = useNavigate();
  const { 
    cartItems, 
    cartData,
    loading: globalLoading, 
    error: globalError, 
    subtotal,
    formatPrice,
    updateCartItem,
    removeCartItem,
    loadCartItems
  } = useCart();
  
  // Local state cho UI loading
  const [updatingItems, setUpdatingItems] = useState({});
  const [deletingItems, setDeletingItems] = useState({});
  const [localError, setLocalError] = useState(null);
  const [iconsLoaded, setIconsLoaded] = useState(true);
  
  // Refs cho theo d√µi thay ƒë·ªïi v√† t·∫°o hi·ªáu ·ª©ng
  const prevQuantitiesRef = useRef({});
  const animatingItemsRef = useRef({});

  // Ki·ªÉm tra xem icons c√≥ load ƒë∆∞·ª£c kh√¥ng
  useEffect(() => {
    // H√†m ki·ªÉm tra icons
    const checkIcons = () => {
      try {
        // Ki·ªÉm tra xem FaPlus/FaMinus c√≥ ƒë√∫ng kh√¥ng
        const hasValidIcons = 
          typeof FaPlus === 'function' && 
          typeof FaMinus === 'function' && 
          typeof FaTrash === 'function';
        
        setIconsLoaded(hasValidIcons);
      } catch (error) {
        console.error("Error checking icons:", error);
        setIconsLoaded(false);
      }
    };
    
    checkIcons();
  }, []);

  // Debugging the cartItems
  useEffect(() => {
    console.log("CartItems component - cartItems:", cartItems);
    console.log("CartItems component - cartData:", cartData);
    
    // C·∫≠p nh·∫≠t ref sau m·ªói l·∫ßn cartItems thay ƒë·ªïi
    const newQuantities = {};
    cartItems.forEach(item => {
      newQuantities[item.id] = item.quantity;
    });
    prevQuantitiesRef.current = newQuantities;
  }, [cartItems, cartData]);

  const shippingFee = 30000;
  const total = subtotal + shippingFee;

  // Update quantity, ch·ªâ v√¥ hi·ªáu h√≥a n√∫t khi ƒëang c·∫≠p nh·∫≠t
  const handleUpdateQuantity = async (itemId, productId, change, currentQuantity) => {
    try {
      // ƒê√°nh d·∫•u item ƒëang ƒë∆∞·ª£c update ƒë·ªÉ v√¥ hi·ªáu h√≥a n√∫t
      setUpdatingItems(prev => ({ ...prev, [itemId]: true }));
      
      // X√≥a l·ªói c≈© n·∫øu c√≥
      setLocalError(null);
      
      // T√≠nh to√°n s·ªë l∆∞·ª£ng m·ªõi
      const newQuantity = Math.max(1, currentQuantity + change);
      console.log(`Updating item ${itemId} quantity from ${currentQuantity} to ${newQuantity}`);
      
      // G·ªçi h√†m updateCartItem t·ª´ context
      await updateCartItem(itemId, productId, newQuantity);
      
      // C·∫≠p nh·∫≠t prevQuantitiesRef sau khi th√†nh c√¥ng
      prevQuantitiesRef.current[itemId] = newQuantity;
    } catch (error) {
      console.error("Error updating item quantity:", error);
      setLocalError(error.message || "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng. Vui l√≤ng th·ª≠ l·∫°i!");
    } finally {
      // B·ªè ƒë√°nh d·∫•u updating sau khi ho√†n th√†nh
      setUpdatingItems(prev => ({ ...prev, [itemId]: false }));
    }
  };

  // X·ª≠ l√Ω x√≥a item v·ªõi loading state v√† hi·ªáu ·ª©ng chuy·ªÉn ƒë·ªïi
  const handleRemoveItem = async (itemId) => {
    try {
      // Hi·ªÉn th·ªã loading cho m·ª•c n√†y
      setDeletingItems(prev => ({ ...prev, [itemId]: true }));
      
      // X√≥a l·ªói c≈© n·∫øu c√≥
      setLocalError(null);
      
      // Th√™m transition khi x√≥a
      animatingItemsRef.current[itemId] = "remove";
      
      await removeCartItem(itemId);
    } catch (error) {
      console.error("Error removing cart item:", error);
      setLocalError("Kh√¥ng th·ªÉ x√≥a s·∫£n ph·∫©m. Vui l√≤ng th·ª≠ l·∫°i!");
      // Reset loading state v√† animation trong tr∆∞·ªùng h·ª£p l·ªói
      setDeletingItems(prev => ({ ...prev, [itemId]: false }));
      delete animatingItemsRef.current[itemId];
    }
  };

  // T√≠nh to√°n gi√° tr·ªã item total v·ªõi hi·ªáu ·ª©ng hi·ªÉn th·ªã t·ª©c th√¨
  const calculateItemTotal = (item, isUpdating) => {
    const price = item.productPrice ?? 0;
    const quantity = item.quantity ?? 0;
    return formatPrice(price * quantity);
  };

  // Handle checkout
  const handleCheckout = () => {
    navigate("/Checkout", { state: { cartItems, subtotal, shippingFee, total } });
  };

  // Check if any item has stock issues
  const hasStockIssues = useMemo(() => {
    return cartItems.some(item => {
      const stock = item.productStock ?? 0;
      // Ch·ªâ coi l√† c√≥ v·∫•n ƒë·ªÅ khi s·ªë l∆∞·ª£ng v∆∞·ª£t qu√° stock ho·∫∑c stock <= 0
      return stock <= 0 || item.quantity > stock;
    });
  }, [cartItems]);

  // Add function to handle product click
  const handleProductClick = (productId) => {
    navigate(`/product/${productId}`);
  };

  if (globalLoading) {
    return (
      <div className="loading-container">
        <h2>ƒêang t·∫£i gi·ªè h√†ng...</h2>
      </div>
    );
  }

  if (globalError) {
    return (
      <div className="error-container">
        <h2>C√≥ l·ªói x·∫£y ra</h2>
        <p>{globalError}</p>
        <button onClick={loadCartItems}>Th·ª≠ l·∫°i</button>
      </div>
    );
  }

  if (cartItems.length === 0) {
    return <div>Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng.</div>;
  }

  return (
    <div className="cart-page">
      <div className="cart-container">
        <div className="cart-header">
          <h1>Gi·ªè H√†ng</h1>
          <span className="item-count">{cartItems.length} s·∫£n ph·∫©m</span>
        </div>

        {localError && (
          <div className="local-error-message">
            {localError}
          </div>
        )}

        {cartItems.length === 0 ? (
          <div className="empty-cart">
            <h2>Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng üõí</h2>
            <p>H√£y th√™m s·∫£n ph·∫©m ƒë·ªÉ ti·∫øp t·ª•c mua s·∫Øm!</p>
            <button onClick={() => navigate("/product-list")} className="continue-shopping">
              Ti·∫øp t·ª•c mua s·∫Øm
            </button>
          </div>
        ) : (
          <div className="cart-content">
            <div className="cart-items">
              {cartItems.map((item) => {
                const productPrice = item.productPrice ?? 0;
                const productName = item.productName || "Unnamed product";
                const isUpdating = updatingItems[item.id];
                const isDeleting = deletingItems[item.id];
                const animationState = animatingItemsRef.current[item.id] || "";
                // Use product's stock directly
                const availableStock = item.productStock ?? 0;
                const isOutOfStock = availableStock <= 0;
                // S·ª≠a ƒëi·ªÅu ki·ªán ƒë·ªÉ ch·ªâ coi l√† max khi l·ªõn h∆°n, b·∫±ng v·∫´n h·ª£p l·ªá
                const isMaxQuantity = item.quantity > availableStock;
                const isAtMaxQuantity = item.quantity === availableStock;
                
                if (isDeleting) {
                  return (
                    <div key={item.id} className="cart-item deleting">
                      <div className="deleting-overlay">
                        {iconsLoaded ? (
                          <FaSpinner className="spinner-icon" />
                        ) : (
                          <div className="spinner-fallback">‚ü≥</div>
                        )}
                        <p>ƒêang x√≥a...</p>
                      </div>
                    </div>
                  );
                }

                return (
                  <div key={item.id} className={`cart-item ${isOutOfStock ? 'out-of-stock' : ''} ${isMaxQuantity ? 'max-quantity' : ''} ${isAtMaxQuantity ? 'at-max-quantity' : ''}`}>
                    <div className="item-image" onClick={() => handleProductClick(item.productId)} style={{ cursor: 'pointer' }}>
                      <img 
                        src={formatProductImageUrl(item.productImage)} 
                        alt={productName}
                        onError={(e) => {
                          e.target.onerror = null;
                          e.target.src = "/src/assets/images/placeholder.png";
                        }}
                      />
                    </div>
                    <div className="item-details">
                      <h3 onClick={() => handleProductClick(item.productId)} style={{ cursor: 'pointer' }}>
                        {productName}
                      </h3>
                      <div className="item-price">
                        {formatPrice(productPrice)}
                      </div>
                      <div className="item-total">
                        Th√†nh ti·ªÅn: {calculateItemTotal(item, isUpdating)}
                      </div>
                      <div className={`item-stock ${isOutOfStock ? 'out-of-stock' : ''} ${isMaxQuantity ? 'max-quantity' : ''} ${isAtMaxQuantity ? 'at-max-quantity' : ''}`}>
                        <strong>T√¨nh tr·∫°ng:</strong> {
                          isOutOfStock 
                            ? <span className="stock-status error">H·∫øt h√†ng</span> 
                            : isMaxQuantity 
                              ? <span className="stock-status error">V∆∞·ª£t gi·ªõi h·∫°n t·ªìn kho ({availableStock})</span>
                              : isAtMaxQuantity
                                ? <span className="stock-status warning">ƒê·∫°t gi·ªõi h·∫°n t·ªìn kho ({availableStock})</span> 
                                : <span className="stock-status available">C√≤n {availableStock} s·∫£n ph·∫©m</span>
                        }
                      </div>
                      
                      {(isOutOfStock || isMaxQuantity || isAtMaxQuantity) && (
                        <div className="stock-alert">
                          {isOutOfStock 
                            ? "S·∫£n ph·∫©m n√†y hi·ªán ƒë√£ h·∫øt h√†ng, vui l√≤ng x√≥a kh·ªèi gi·ªè h√†ng ho·∫∑c quay l·∫°i sau." 
                            : isMaxQuantity
                              ? `S·ªë l∆∞·ª£ng ƒë√£ v∆∞·ª£t qu√° t·ªìn kho hi·ªán c√≥ (${availableStock}), vui l√≤ng gi·∫£m s·ªë l∆∞·ª£ng.`
                              : `B·∫°n ƒë√£ ch·ªçn t·ªëi ƒëa s·ªë l∆∞·ª£ng c√≥ th·ªÉ (${availableStock}).`}
                        </div>
                      )}
                    </div>

                    <div className="item-controls">
                      <div className="quantity-controls">
                        <button
                          onClick={() => handleUpdateQuantity(item.id, item.productId, -1, item.quantity)}
                          disabled={item.quantity <= 1 || isUpdating}
                          className="minus-btn"
                          aria-label="Gi·∫£m s·ªë l∆∞·ª£ng"
                          type="button"
                          style={{
                            ...overrideStyles.quantityButton,
                            ...(item.quantity <= 1 || isUpdating ? overrideStyles.quantityButtonDisabled : {})
                          }}
                        >
                          <FaMinus style={overrideStyles.icon} />
                        </button>
                        <span>{item.quantity}</span>
                        <button 
                          onClick={() => handleUpdateQuantity(item.id, item.productId, 1, item.quantity)}
                          disabled={isUpdating || isMaxQuantity || isOutOfStock}
                          className="plus-btn"
                          aria-label="TƒÉng s·ªë l∆∞·ª£ng"
                          type="button"
                          style={{
                            ...overrideStyles.quantityButton,
                            ...(isUpdating || isMaxQuantity || isOutOfStock ? overrideStyles.quantityButtonDisabled : {})
                          }}
                        >
                          <FaPlus style={overrideStyles.icon} />
                        </button>
                      </div>
                      <button 
                        className="remove-button" 
                        onClick={() => handleRemoveItem(item.id)}
                        disabled={isDeleting || isUpdating}
                        type="button"
                        style={{
                          ...overrideStyles.removeButton,
                          ...(isDeleting || isUpdating ? overrideStyles.removeButtonDisabled : {})
                        }}
                      >
                        <FaTrash style={overrideStyles.icon} /> <span>X√≥a</span>
                      </button>
                    </div>
                  </div>
                );
              })}
            </div>

            <div className="cart-summary">
              <h3>T√≥m T·∫Øt ƒê∆°n H√†ng</h3>
              <div className="summary-row">
                <span>T·ªïng T·∫°m T√≠nh</span>
                <span>{formatPrice(subtotal)}</span>
              </div>
              <div className="summary-row">
                <span>Ph√≠ V·∫≠n Chuy·ªÉn</span>
                <span>{formatPrice(shippingFee)}</span>
              </div>
              <div className="summary-row total">
                <span>T·ªïng C·ªông</span>
                <span>{formatPrice(total)}</span>
              </div>
              
              {hasStockIssues && (
                <div className="stock-warning">
                  <p>Kh√¥ng th·ªÉ thanh to√°n v√¨ c√≥ s·∫£n ph·∫©m h·∫øt h√†ng ho·∫∑c s·ªë l∆∞·ª£ng v∆∞·ª£t qu√° t·ªìn kho.</p>
                  <p>Vui l√≤ng ƒëi·ªÅu ch·ªânh s·ªë l∆∞·ª£ng ho·∫∑c x√≥a c√°c s·∫£n ph·∫©m kh√¥ng ƒë·ªß h√†ng.</p>
                </div>
              )}
              
              <button
                className="checkout-button"
                onClick={handleCheckout}
                disabled={cartItems.length === 0 || hasStockIssues}
              >
                {hasStockIssues ? 'C√≥ s·∫£n ph·∫©m h·∫øt h√†ng' : 'Ti·∫øn H√†nh Thanh To√°n'}
              </button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default CartItems;
